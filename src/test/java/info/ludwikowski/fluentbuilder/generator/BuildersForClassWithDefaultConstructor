package info.ludwikowski.fluentbuilder.sample;

import info.ludwikowski.fluentbuilder.common.AbstractBuilder;
import java.math.BigDecimal;


/**
 * Abstract builder for ClassWithDefaultConstructor.
 * After changes in ClassWithDefaultConstructor this class will be overridden, so don't put any changes here, use ClassWithDefaultConstructorBuilder instead.
 */
public abstract class AbstractClassWithDefaultConstructorBuilder<B> extends AbstractBuilder<ClassWithDefaultConstructor, B> {

	public abstract B withNumber(Integer number);
	public abstract B withClassFormAnotherPackage(BigDecimal classFormAnotherPackage);

}

/////////////////////////////////////
package info.ludwikowski.fluentbuilder.sample;

import info.ludwikowski.fluentbuilder.common.AbstractBuilderFactory;
import java.math.BigDecimal;


/**
 * Fluent builder for ClassWithDefaultConstructor.
 * Don't hesitate to put your custom methods here.
 */
public abstract class ClassWithDefaultConstructorBuilder extends AbstractClassWithDefaultConstructorBuilder<ClassWithDefaultConstructorBuilder> {

	public static ClassWithDefaultConstructorBuilder aClassWithDefaultConstructor(){
		return AbstractBuilderFactory.createImplementation(ClassWithDefaultConstructorBuilder.class);
	}

	public static ClassWithDefaultConstructorBuilder aClassWithDefaultConstructor(Integer arg0){
		return AbstractBuilderFactory.createImplementation(ClassWithDefaultConstructorBuilder.class, arg0);
	}

	public static ClassWithDefaultConstructorBuilder aClassWithDefaultConstructor(BigDecimal arg0){
		return AbstractBuilderFactory.createImplementation(ClassWithDefaultConstructorBuilder.class, arg0);
	}

	public static ClassWithDefaultConstructorBuilder aClassWithDefaultConstructor(Integer arg0, BigDecimal arg1){
		return AbstractBuilderFactory.createImplementation(ClassWithDefaultConstructorBuilder.class, arg0, arg1);
	}
}